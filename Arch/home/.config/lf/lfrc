#${{
#    if [ -f "$HOME/.cache/wal/sequences" ]; then
#        cat "$HOME/.cache/wal/sequences"
#    fi
#}}

set previewer ~/.config/lf/lf_kitty_preview
set cleaner ~/.config/lf/lf_kitty_clean

# Basic Settings
#set hidden true
set ignorecase true
set icons true
#set drawbox true

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) vim "$f";;
        *) xdg-open "$f" ;;
    esac
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.7z) 7z x "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar.xz) tar -xJvf "$f" ;;
      *.tar.lzma) tar --lzma -xvf "$f" ;;
      *.tar.zstd) tar --zstd -xvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.rar) unrar x "$f" ;;
  esac
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

cmd empty_trash ${{
  trash-empty
}}

# Bindings
map d
map m
map c
map au unarchive

# Basic Functions
map . set hidden!
map dd trash
map dr restore_trash
map dt empty_trash
map p paste
map x cut
map y copy
map <enter> open
map R reload
map mf mkfile
map md mkdir
map ch chmod
map C clear

# Movement
map gD cd ~/Documents
map gd cd ~/Downloads
map gp cd ~/Pictures
map gc cd ~/.config
map gv cd ~/Videos
map gs cd ~/.local/bin
map gt cd ~/.local/share/Trash/files
